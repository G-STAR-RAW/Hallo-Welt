hello
1.16	Spring 框架中都用到了哪些设计模式？
	工厂模式：BeanFactory就是简单工厂模式的体现，用来创建对象的实例；
	单例模式：Bean默认为单例模式。
	代理模式：Spring的AOP功能用到了JDK的动态代理和CGLIB字节码生成技术；
	模板方法：用来解决代码重复的问题。比如. RestTemplate（封装HTTP请求）。

1.17	控制反转（IOC）
将创建管理对象的工作交给容器来做。在容器初始化（或在某个时间节点）通过反射机制创建好对象，在使用时直接从容器中获取。
	控制反转：将对象的控制权反过来交给容器管理。
	依赖注入（DI）：将对象依赖写入配置文件，在创建有依赖关系的对象时，由IOC容器来注入依赖的兑现。构造器注入、setter方法注入。

1.17.1	实现原理（流程）：（反射+XML技术）
利用（反射+工厂）技术，根据配置文件中给出的类名生成相应的对象。
Class.forName(className).newInstance。
	Tomcat启动Spring容器；
	初始化Spring容器，加载application.xml配置文件；
	获取扫描包下所有class文件；
	解析class中的注解信息；
	通过反射实例化相应bean对象，以<beanId,bean>的形式保存集合，存储在IOC容器中。
	通过ApplicationContext的getBean方法获取Bean。

1.17.2	反射和new
 
	new只能用于编译期就能确定的类型, 而反射可以在运行时才确定类型并创建其对象。例如：Spring是事先写好的框架，在编译时其内部处理并不知道将来用户要加载哪些类到IOC容器中，此时就需要使用到反射；
	使用new出来的对象无法访问私有属性，使用反射出来的对象可以通过setAccessible访问私有属性。
	使用反射可以使程序代码更加灵活，使用运行期的动态加载。

1.17.3	IOC的好处
创建Bean及其依赖对象的工作交给IOC容器管理，业务代码只需要getBean就行了。将依赖关系写入配置文件中，有修改时，直接修改配置文件即可，而不用去业务代码中每一个使用Bean的地方修改。

1.17.4	IOC类型
	构造注入：通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。（对象的依赖关系可在构造函数中完成）。
	Setter方法注入：容器通过调用无参构造器或无参static方法实例化bean之后，调用bean的setter方法。

1.17.5	IOC的初始化过程
资源定位、资源载入BeanDefinition、<BeanName、BeanDefiniton>注册到IOC容器。
 
	Resource定位（Bean的定义文件定位），返回Resource对象
Resource对象与对应ApplicationContext类型如下：
FileSystemResource(绝对路径定位)：FileSystemXmlApplicationContext;
ClassPathResourcee(类路径定位)：ClassPathXmlApplicationContext;
ServletContextResource(web应用根目录)：XmlWebApplicationContext;
UrlResource：访问网络资源的实现类。例如file: http: ftp:等前缀的资源对象;
ByteArrayResource: 访问字节数组资源的实现类。

@Configuation：AnnotationConfigApplicationContext

Spring提供ResourceLoader接口用于实现不同的Resource加载策略，所有的ApplicationContext均实现了ResourceLoader。

	将Resource定位好的资源载入到BeanDefinition
加载Resource对象中的Bean配置成BeanDefinition，如果Bean有依赖关系，则使用占位符（getBean时，将占位符替换成相应的Bean）暂时代替。

	将<BeanName, BeanDefinition>注册到IOC容器中

1.18	静态代理和动态代理
在不修改目标对象功能的前提下，对目标对象功能进行扩展。
JDK动态代理只能对实现了接口的类生成代理，而不能针对类 。
CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 。

1.18.1	final方法如何进行动态代理
Cglib动态代理是通过生成目标类的子类实现的动态代理，且final方法不允许被子类重写，所以无法通过cglib实现final方法的动态代理。
	而JDK动态代理，是通过反射的方式，生成代理接口的子类，反射可以
1.18.2	静态代理
在编译期间就生成了代理类，编译完成后是一个实际的class文件。
优点：在编译时就产生字节码文件，执行效率高。
缺点：目标对象过多，会产生很多代理类。
代理对象和目标对象都要实现同一个业务接口。
 
代理类和被代理类必须实现同一个接口；
代理类持有被代理类对象realSubject；
客户端持有的实际对象时Proxy。
1.19	AOP（面向切面编程）--代理模式
将一些系统性相关（日志、事务、安全）的编程工作，独立提取出来，独立实现，作为一个公共切面切入到相关的业务逻辑中。
将业务逻辑代码与公共功能代码分离开，使开发人员能更专注地编写业务逻辑代码。
在不改变业务逻辑代码的前提下，在业务逻辑之前、之后、或者周围添加横切关注点(切面)，对目标功能进行扩展。

1.19.1	AOP的应用场景
事务（数据库更新），权限（web请求权限），日志（每一次更新记录）

1.19.2	AOP基本术语切点、切面、连接点、通知等
	通知：定义AOP切面执行的工作，以及切面执行的时间。
（Before、After、After-returning、After-throwing、Around）
	切点：定义切面执行的地点，满足配置条件的目标方法（在什么地方执行切面）。
	连接点：切点的全集。一个程序可能会有多个切面，不同切面映射需要不同切点。
	切面：切点+通知。在什么时候、什么地点、执行什么工作。

1.19.3	AOP的两种实现方式(注解、xml文件)
	XML方式
 
 
普通工程通过 初始化Spring。
在执行DogService类中的方法时，执行前会先执行PointCutXmlConf类中的beforeAdvice方法，执行后会执行PointCutXmlConf类中的afterAdvice方法。

	注解方式
Java配置类
 
@ComponentScan定义自动扫描的包
@EnableAspectJAutoProxy = <aop:aspectj-autoproxy/>
Java切面类
 
普通工程通过 初始化Spring容器。

1.19.4	AOP原理
	JDK（动态）代理（反射）
利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。
动态代理实际上是程序在运行中，根据被代理的接口来动态生成代理类的class文件，并加载class文件运行的过程。
而动态生成的代理类已经继承了Proxy类，由于Java的单继承，所以只能靠实现被代理类的接口的形式，而不是靠继承被代理类的形式。
JVM编译完成时并没有实际的字节码文件，而是在运行时动态生成类字节码，并加载到JVM中。 
优点：通过反射，可以有效减少代理类的数量，使用更灵活；
缺点：反射代理，比较消耗系统性能。
目标对象实现接口，代理对象可以不实现业务接口。
 
主要类：
Java.lang.reflect.Proxy以及Java.lang.reflect. InvocationHandler接口(事件处理器)
Proxy类：创建一个代理对象
InvocationHandler接口：代理实例的调用处理程序。
主要方法：
 
JDK代理类实例：
 
也可以把InvocationHandler独立出来：
 

	cglib代理
利用ASM（开源的Java字节码编辑库，操作字节码）开源包，将代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。
由于被代理类没有实现接口，所以运行时在内存中动态生成一个子类对象从而实现对目标对象的扩展。子类对象会重写目标对象的方法，所以目标对象不能为final类。
代理类和目标类都无需实现业务接口。
 


1.20	Bean
1.20.1	Spring Bean的作用域
Singleton：默认值，创建容器时创建Bean，以单例方式存在。
Prototype：每次请求都会创建一个新的Bean实例。
Request：每个HTTP请求都会创建一个新的Bean。
Session：同一个session共享一个Bean。

1.20.2	Spring的单例Bean的线程安全问题
如果单例Bean不定义可变的成员变量，则线程是安全的。
如果单例Bean状态可变，且同时被多个线程调用，则可能存在线程安全问题。

解决方法：
Bean中尽量避免可变的成员变量；
	在类中定义ThreadLocal成员变量，将线程需要的可变变量保存在ThreadLocal中。
1.20.3	Bean的生命周期
实例化、属性赋值、初始化、销毁。
 
 
	容器寻找Bean的定义并利用反射进行实例化；
	依赖注入（IOC），根据Bean的配制，进行Bean的属性注入；
	处理Aware接口
Bean实现BeanNameAware接口：setBeanName(),传递Spring配置文件中Bean的ID；
Bean实现BeanFactoryAware接口：setBeanFactory(),传递Spring工厂；
Bean实现ApplicationContextAware接口：setApplicationContext(),传入Spring上下文；
	Bean存在实现了BeanPostProcessors接口的实例A：实例A的postProcessBeforeInitialization();
	Spring配置文件中配置init-method方法；
	Bean存在实现了BeanPostProcessors接口的实例A：实例A的postProcessAfterInitialization();

完成Bean的创建-------Bean使用中

	Bean实现了DisposableBean接口：调用destroy()方法；
	Spring配置文件中配置destory-method方法

注：BeanPostProcessors接口的两个方法，主要是在Bean实例化之后、初始化前后，允许对bean实例进行自定义的修改。
1.20.4	Spring创建Bean的三种方式
	通过构造方法创建
目标类提供构造函数，由Spring自带的工厂(BeanFactory)维护和管理目标类。
 
	通过静态工厂方法创建
目标类提供一个静态工厂方法，把类交给提供的静态工厂管理，Spring只是帮我们调用了静态工厂创建实例的方法，而实际的创建过程在静态工厂方法中。
 
	通过实例工厂方法创建
目标类提供一个实例工厂方法(需先定义实例工厂Bean)，把创建实例的工厂类userFactory交给Spring管理，创建实例的过程由配置的实例工厂userFactory内部实现，Spring管理调用实例工厂类的方法进行实例创建。
 
1.21	~~Spring实现了哪些后置处理器

1.22	Spring事务(@Transaction)
1.22.1	事务的四大特性
	原子性
从操作的角度来描述，事务中的各个操作要么都成功，要么都失败；
	一致性
从数据的角度来描述，事务中的数据从一个一致性状态变换到另一个一致性状态。
比如：转账前A有1000， B有1000。转账后A+B也得是2000。
	隔离性
并发时，每个事务不能被其他事务的操作数据所干扰，多个并发事务之间互相隔离。
	持久性
一个事务一旦被提交，那它对数据库中数据的改变就是永久性的。
1.22.2	事务并发问题
	脏读
	一个事务读取了另一个事务尚未提交的数据。
	初值age=10，事务A修改age=20，事务B读取age=20，事务A回滚age=10。
	丢失更新
	两个事务同时更新一行数据，最后一个事务的更新会覆盖前一个事务的更新。
	事务A更新age=50 ->> 事务B更新age=30。事务A的更新被覆盖。
	幻读
一个线程中的事务读到了另一个线程中已经提交的insert/delete的数据。
	事务多次读取同一个数据，数据总量不一致。（前后多次读取，数据总量不一致）
事务A查询数据总量100条，事务B新增数据100条，数据A查询总量为200条。
	不可重复读
一个线程中的事务读到了另一个线程中已经提交的update的数据。(前后内容不一样)
	事务多次读取同一条数据，数据内容不一样。（前后多次读取，数据内容不一样）
	事务A读age=10，事务B修改age=20(且提交事务)，事务A读age=20。
不可重复读的重点是修改，幻读的重点是新增或删除。

1.22.3	事务的传播行为
一个事务方法被另一个事务方法调用的时候，当前事务方法如何运行。
多个具有事务控制的service互相调用时的事务传播问题。
	PROPAGATION_REQUIRED
如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择。
	PROPAGATION_SUPPORTS
支持当前事务，如果当前没有事务，就以非事务方式执行。
	PROPAGATION_MANDATORY
	使用当前的事务，如果当前没有事务，就抛出异常。
	PROPAGATION_REQUIRES_NEW
	新建事务，如果当前存在事务，把当前事务挂起。
	PROPAGATION_NOT_SUPPORTED
	以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
	PROPAGATION_NEVER
	以非事务方式执行，如果当前存在事务，则抛出异常。
	PROPAGATION_NESTED
如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。

1.22.4	事务的隔离级别（类似数据库的事务隔离级别）
	DEFAULT:使用后端数据库默认的隔离级别
	READ_UNCOMMITTED: 读未提交
	READ_COMMITTED:读已提交
	REPEATABLE_READ: 重复读
	SERIALIZABLE: 事务串行化

1.22.5	Spring管理事务的方式
	编程式事务，在代码中硬编码；
 
	声明式事务，在配置文件中配置（基于XML和注解）
通过AOP功能，对@Transaction标注的类或方法前后进行拦截，将事务处理的相关功能编织到拦截的方法中。
1.22.6	Spring事务的基本原理（代理）
Spring在启动时会去解析生成相关的Bean，在使用事务的时候，会为标注为@Transaction的类和方法生成一个代理，通过代理对这些类进行事务（提交、回滚）处理。


1.22.7	事务不生效的场景
	数据库引擎不支持事务。MyISAM不支持事务，InnoDB支持事务；
	入口方法必须是public方法，以便Spring使用AOP切入该方法；换言之，只有通过AOP切入的方法，才能使事务生效；
	Spring的事务管理只对RuntimeException及其子类中的运行期异常进行回滚；
	必须使用@EnableTransactionManagement或者在xml中配置开启事务管理；
	事务所在的类必须被Spring代理；
	业务和事务入口必须在同一个线程里；即事务方法中新开的线程不属于当前事务；
	同一个类中一个无事务的方法调用另一个有事务的方法，事务不生效(类内部方法调用事务不生效)；
2.2	Mapper接口的实现原理(JDK动态代理)
Mybatis运行的JDK的动态代理会为Mapper接口生成一个代理Proxy对象，代理对象会拦截接口方法，转而执行MappedStatement所代表的SQL，然后将SQL执行结果返回。

2.3	Mybatis缓存
2.3.1	一级缓存
sqlSession级别缓存，操作数据库时需要构建sqlSession对象，在对象中有一个HashMap用以存储缓存结构，保存在本地。
当sqlSession做增加、修改、删除、commit()、close()任意一个操作时，都会清空一级缓存。
2.3.2	二级缓存
	一级缓存缓存的是对象，二级缓存缓存的是数据。
	Mapper级别缓存，多个sqlSession操作同一个mapper(xml映射文件)时，可共享同一个二级缓存，同一个接口里面的相同方法，都可以共享缓存。
	进行缓存POJO类需要实现serializable接口，因为二级缓存有可能存储在内存中，也有可能存储在硬盘中，实现该接口是为了对数据进行序列化和反序列化操作。
	SqlMapConfig.xml需要增加如下配置
 
	使用xml映射文件时，需要在相应xml文件中增加<cache>标签开启二级缓存；使用注解开发时，需要在相应dao接口上新增@CacheNameSpace注解以开启二级缓存。
   
	查询操作从二级缓存中取数据时，会将数据反序列化为一个新的对象，所以与一级缓存不同的是，多次从二级缓存中获取相同数据时，虽然数据相同，但是对象是不同的。
	注意：在开启二级缓存时，对于查询操作，只有在commit或close后才能将数据刷新到二级缓存；而对于增删改操作，默认会清空二级缓存(flushCache  = true)。
2.4	mybatis的二级缓存有什么问题？
二级缓存是保存在Mapper对象中的，现在有一张user表，两个Mapper文件，AMapper.xml和BMapper.xml，B修改了user表中的内容，A是感知不到的，那么再从A里查询如果用到了缓存，就是旧的数据。

2.5	Spring整合Mybatis
2.5.1	在applicationContext.xml配置文件中
 

2.5.2	创建@Mapper接口文件，与数据库进行交互
 
注意：@Mapper注解只能在mybatis-3.4.0及之后的版本使用，之前的版本只能使用xml的形式。
2.6	mybaits中的mapper的#{}和${}有什么区别？哪种可以防止sql注入？
	#{}是预编译处理，$ {}是字符串替换。
	MyBatis在处理#{}时，会将SQL中的#{}替换为?号，使用PreparedStatement的set方法来赋值；MyBatis在处理 $ { } 时，就是把 ${ } 替换成变量的值。
	使用 #{} 可以有效的防止SQL注入，提高系统安全性。

2.7	Xml映射文件中，除了常见的select|insert|update|delete标签之外，还有哪些标签？
动态sql标签：trim|where|set|foreach|if|choose|when|otherwise|bind；
<resultMap>、<parameterMap>、<sql>、<include>、<selectKey>；
其中<sql>为sql片段标签，通过<include>标签引入sql片段；
<selectKey>为不支持自增的主键生成策略标签。
	@Results
指定表的字段名和对象属性名的对应关系。
 
2.8	每一个xml映射文件都会有一个对应的dao，Dao的工作原理是什么？
Dao接口，即Mapper接口，没有实现类；接口名+方法名，唯一定位一个MappedStatement。
原理：
JDK动态代理，Mybatis运行时会使用JDK动态代理为Dao接口生成代理proxy对象，代理对象proxy会拦截接口方法，转而执行MappedStatement所代表的sql，然后将sql执行结果返回。

接口的全限定名就是xml映射文件中的namespace值。
接口的方法名就是xml映射文件中的id值。
接口的方法参数就是传递给sql的入参。
2.9	动态sql
动态sql可以让我们在映射文件中，根据不同的逻辑，动态拼接不同的SQL；
trim|where|set|foreach|if|choose|when|otherwise|bind。
	原理：使用OGNL从sql参数对象中计算表达式的值，根据表达式的值动态拼接sql，以此来完成动态sql的功能。
2.10	Mybatis延迟加载
仅支持 association(@One)关联对象和collection(@Many)关联对象的延迟加载。
延迟加载基于动态代理实现， 当执行连表查询时，针对 association 和 collection 的查询语句，不会立即去数据库查询，而是会生成关联目标类的代理对象，并保存起来。之后会在调用关联目标类对象的方法时，才会去执行关联对象涉及的查询语句。

2.11	核心对象的生命周期
2.11.1	SqlSessionFactoryBuilder
SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
SqlSessionFactoryBuilder 是用来创建SqlSessionFactory的，可以被实例化、使用和丢弃，一旦创建了SqlSesionFactory,就不再需要它了。因此，SqlSessionFactoryBuilder实例的最佳作用域是方法作用域，也就是局部方法变量。
2.11.2	SqlSessionFactory
SqlSessionFactory一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。使用SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次(单例)。因此 SqlSessionFactory 的最佳作用域是应用作用域。
2.11.3	SqlSession
每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。
2.11.4	Mapper
映射器是一些由你创建的、绑定你映射的语句的接口。映射器接口的实例是从 SqlSession 中获得的。因此从技术层面讲，任何映射器实例的最大作用域是和请求它们的 SqlSession 相同的。尽管如此，映射器实例的最佳作用域是方法作用域。 也就是说，映射器实例应该在调用它们的方法中被请求，用过之后即可丢弃。
2.12	Mybatis四大组件
SqlSession 	作为MyBatis工作的主要顶层API，表示和数据库交互的会话，完成必要数
据库增删改查功能
Executor	MyBatis执行器，是MyBatis调度的核心，负责SQL语句的生成和查询缓 存
的维护
StatementHandler 	封装了JDBC Statement操作，负责对JDBC statement的操作，如设置参
数、将Statement结果集转换成List集合。
ParameterHandler 	负责对用户传递的参数转换成JDBC Statement所需要的参数，
ResultSetHandler 	负责将JDBC返回的ResultSet结果集对象转换成List类型的集合；

2.13	Mybatis插件原理(动态代理+责任链)
对mybatis来说，插件就是拦截器，支持用插件对四大核心对象尽心拦截。
	执行器Executor (update、query、commit、rollback等方法)；
	SQL语法构建器StatementHandler (prepare、parameterize、batch、updates query等方 法)；
	参数处理器ParameterHandler (getParameterObject、setParameters方法)；
	结果集处理器ResultSetHandler (handleResultSets、handleOutputParameters等方法)

	在创建Mybatis四大组件的时候，首先会生成四大组件的一个原生对象；
	然后通过interceptorChain.pluginAll(target)，调用拦截器链(插件)对原生对象进行拦截和功能加强，返回被重重代理(多插件)后的一个代理对象；
	返回的代理对象可以拦截到目标对象的每一个执行。
以ParameterHandler的创建为例：

3	~~~SpringBoot
3.1	什么是SpringBoot
约定优于配置，目的是简化Spring应用的初始搭建以及开发过程。
3.2	SpringBoot的核心
3.2.1	依赖管理
Maven主导，父项目做依赖管理（自动版本仲裁）。即spring-boot-starter-parent提供相关的 Maven 默认依赖，使用它之后，常用包的依赖就可以省去 version 标签。
3.2.2	自动配置
@SpringBootApplication = @SpringBootConfiguration + @EnableAutoConfiguration + @ComponentScan
	@SpringBootConfiguration
和Configuration注解一样，标注当前类是配置类，并会将当前类内生命的Bean交给IOC容器进行管理。
	@EnableAutoConfiguration
@AutoConfigurationPackage
使用@Import，将SpringBoot启动类所在包及其子包里面所有组件加载到Spring容器中。
 
@Import(AutoConfigurationImportSelector.class)
使用内部工具类SpringFactoriesLoader，查找classpath上所有jar包中的META-INF/spring.factories进行加载，实现将配置类信息交给SpringFactory加载器进行一系列的容器创建过程。(spring.factories文件中配置了需要进行加载的Java配置类)。

	@ComponentScan
指定扫描的包路径，如果没有指定，则将SpringBootApplication的包路径作为扫描的基本包路径。

3.3	约定优于配置，体现在哪些方面
	默认的配置文件：application.properties 或 application.yml 文件。
	默认通过 spring.profiles.active 属性来决定运行环境时的配置文件。
	Maven的目录结构。默认有resources文件夹,存放资源配置文件。
3.4	如何自定义starter
命名规范：官方推出的starter 以spring-boot-starter-xxx的格式来命名，第三方开发者自定义的starter则以xxxx-spring-boot-starter的规则来命名。
3.4.1	新建maven工程，并导入自动配置依赖包
 
3.4.2	创建JavaBean(业务逻辑)
 
3.4.3	编写配置类
@Conditional接口：按照一定条件进行判断，满足条件给容器注册Bean。
常用实现：@ConditionalOnClass、@ConditionOnBean。
也可配置@Import注解，引入其他的配置类。
 
3.4.4	Resources下创建META-INF/spring.factories
 

3.5	SpringBoot开启热启动
 

3.6	@SpringBootApplication
@Configuration+@EnableAutoConfiguration+@ComponentScan
	@Configuration
生命当前类是一个配置类。
	@EnableAutoConfiguration
SpringBoot实现自动化配置的核心注解，该注解把spring应用所需的bean注入容器中。
	@ComponentScan
扫描注解所在配置类包及子包中类中的@Service,@Repository,@Component,@Controller等注解，也可以通过basePackages属性来指定需要进行扫描的包。

3.7	@ConfigurationProperties
把application.properties/yml配置文件中的属性映射到一个java类中

3.8	com.mysql.jdbc.Driver和com.mysql.cj.jdbc.Driver的区别	
com.mysql.jdbc.Driver 是 mysql-connector-java 5中的；
com.mysql.cj.jdbc.Driver 是 mysql-connector-java 6及以上中的；

JDBC连接mysql5需使用com.mysql.jdbc.Driver;
JDBC连接mysql6需使用com.mysql.cj.jdbc.Dricer，同时需要指定时区serverTimezone；

设定时区时，serverTimezone=UTC比中国时间早8个小时，若在中国，可设置serverTimezone=Shanghai或者serverTimezone=Hongkong。


3.9	SpringBoot整合hibernate
3.9.1	@Table和@Entity的区别
@Entity说明这个class是实体类，并且使用默认的orm规则，即class名即数据库表中表名，class字段名即表中的字段名；如果想改变这种默认的orm规则，就要使用@Table来改变class名与数据库中表名的映射规则。




3.10	SpringBoot整合Mybatis
 
 
 
 
3.11	Hibernate和mybatis的区别？
3.11.1	Hibernate
	可自动生成SQL语句，无需关心SQL的生成与结果映射，可以更专注于业务代码；
	常用于管理系统业务，业务逻辑>性能；
	可自动生成数据表结构；
	移植性强，比如mysql切换到oracle只需要切换修改方言配置，在生成SQL语句的时候hibernate会自动进行切换；
3.11.2	Mybatis
	需要手动编写SQL语句，以及ResultMap(对象属性与数据表列名的映射)
	常用于互联网业务(比如网页的响应)，对性能的追求更高；
	需要手动创建数据库及数据表；
	数据库发生变更时，需要对新数据库的SQL语句进行重新适配。


4	SpringCloud
4.1	SpringBoot和SpringCloud的区别？
	SpringBoot专注于快速方便的开发单个个体微服务。
	SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开发的一个个单体微服务整合并管理起来，为各个微服务之间提供，配置管理、服务发现、断路器、路由、微代理、事件总线、全局锁、决策竞选、分布式会话等等集成服务
4.2	SpringCloud和Dubbo的服务调用
	RPC：远程过程调用，自定义数据格式，传输层，速度快效率高；
缺点：生产者和消费者之间依赖太强(通过接口调用)，消费者需要为每一个微服务进行接口定义。
	Http：规定了数据传输格式，应用层，封装臃肿、但灵活性高。
4.2.1	Dubbo服务调用
Dubbo通过RPC进行服务间调用，常用Zookeeper作为注册中心，通过生产者和消费者协定好的接口进行服务调用。
服务调用基于接口进行双方交互：
	双方协定好Dubbo调用中的接口(maven)；
	生产者提供实现类并且注册(生产者)到注册中心；
	消费者引入接口依赖，并将自己注册(消费者)到注册中心，即可对提供者进行调用。
 
4.2.2	SpringCloud服务调用
SpringCloud通过Rest风格的Http进行服务间调用，提供多种便捷访问远程http服务的RestTemplate模板进行服务间调用。
 
	但是直接使用RestTemplate进行远程调用，还需要用户进行url拼接，所以SpringCloud提供了Feign(RestTemplate + Ribbon + Hystrix)进行服务间远程调用处理。
4.3	~~~服务注册中心Eureka和Zookeeper的区别
	ZooKeeper保证的是CP，Eureka保证的是AP；



4.4	微服务基本概念
4.4.1	SOA
  

4.4.2	服务雪崩
 
一个服务故障后，依赖该服务的其他服务也相继故障，最终导致整个服务链路的崩溃，叫做服务雪崩。
假设我们有两个访问量比较大的服务A和B，这两个服务分别依赖C和D,C和D服务都依赖E服务。
A和B不断的调用C,D处理客户请求和返回需要的数据。当E服务故障时，C和D的超时和重试机制会被执行。（E服务故障）
由于新的调用不断的产生，会导致C和D对E服务的调用大量的积压，产生大量的调用等待和重试调用，慢慢会耗尽C和D的资源比如内存或CPU。（CD服务故障）
	A和B服务会重复C和D的操作，资源耗尽，然后down掉，最终整个服务都不可访问。（AB服务故障）

4.4.3	熔断机制(Hystrix)
当服务出现高并发时，SpringCloud的熔断机制会监控服务间的调用情况，当调用失败的次数达到一定阈值时，就会启动熔断机制(切断对下游系统的调用)。
 
熔断器有三个状态：
Closed：关闭状态，请求被放行，调用失败次数积累到一定阈值时，则启动熔断机制，转为打开状态；
Open：打开状态，所有请求都会被拒绝，直接返回失败；只有在经过一个设定的时间周期后，熔断器转为半开状态；
Half-Open：允许一定量的服务请求被放行，如果调用都成功，则转为关闭状态，放行所有请求；如果调用失败，又转为打开状态。
4.4.4	服务降级
当某个服务熔断之后，客户端返回自己准备的一个默认值(或回调函数)，而不再调用崩溃的下游服务，从而保证服务可用。
4.4.5	服务网关
功能：	1、API路由(转发请求到下游的微服务)；
2、基于Filter链提供鉴权、流量控制、熔断、日志监控等功能。

4.5	分布式系统的CAP理论
C:Consistency(一致性)、A: Availability(可用性)、P：Partition tolerance(分区容错性)
一个分布式系统不可能同时满足这三个条件，最多只能满足其中两个。
一般情况下，分区容错性是必不可少的，所以分布式系统一般在一致性和可用性中做选择。
 
CA：单机服务，不能保证分区容错性。
CP：写入数据并同步从数据库数据时，锁定数据库，同步完成后再释放锁。锁定期间，用户请求会被阻塞，不满足可用性。
AP：用户请求到来时，允许返回未同步的数据(master已更新，slave未更新)。
4.6	Base理论
Base理论用于协调CAP中的一致性和可用性，在满足分区容错性的前提下，会尽量平衡一致性、可用性。即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。
4.6.1	Basically Available(基本可用)
分布式系统在出现不可预知故障的时候，允许损失部分可用性
比如：增加响应时间、服务降级
 
4.6.2	Sox state（软状态）
允许系统在多个不同节点的数据副本之间进行数据同步的过程中存在延迟。
4.6.3	Eventually consistent（最终一致性）
系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。


4.7	~~~分布式事务的解决方案
两阶段提交、三阶段提交、TCC


4.8	~~~如何保证幂等性

4.9	核心组件
	Eureka：各个服务启动时，Eureka Client都会将服务注册到Eureka Server，并且Eureka Client还可以反过来从Eureka Server拉取注册表，从而知道其他服务在哪里；
代码中通过服务名找到对应的IP地址(IP地址会变，但服务名一般不会变)。
	Ribbon：服务间发起请求的时候，基于Ribbon做负载均衡，从一个服务的多台机器中选择一台，默认为轮询算法；
	Feign：基于Feign的动态代理机制，根据注解和选择的机器，拼接请求URL地址，发起请求；
 
	Hystrix：发起请求是通过Hystrix的线程池来走的，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题；
舱壁模式(线程池隔离策略)：不同的服务使用不同的线程池，避免因请求过多导致正常服务无法访问。
	Zuul/GateWay：如果前端、移动端要调用后端系统，统一从Zuul网关进入，由Zuul网关转发请求给对应的服务，网关会根据请求中的一些特征，将请求转发给后端的各个服务。
4.10	注册中心
4.10.1	原理
主要角色：服务提供者(RPC Server)、服务消费者(RPC Client)和服务注册中心(Registry)
	RPC Server 提供服务，在启动时，根据服务发布文件 server.xml 中的配置的信息，向 Registry 注册自身服务，并向Registry 定期发送心跳汇报存活状态。
	RPC Client调用服务，在启动时，根据服务引用文件client.xml 中配置的信息，向 Registry 订阅服务，把Registry返回的服务节点列表缓存在本地内存中，并与 RPC Sever 建立连接。
	当 RPC Server 节点发生变更时，Registry 会同步变更，RPC Client 感知后会刷新本地内存中缓存的服务节点列表。
	RPC Client从本地缓存的服务节点列表中，基于负载均衡算法选择一台 RPC Sever 发起 调用。

4.11	~~~Feign底层原理
Feign = RestTemplate + Ribbon + Hystrix。
是一个轻量级的Restful的HTTP服务客户端，以Java注解接口的方式调用Http请求。
服务消费者拿到服务提供者的接口，然后像调用本地方法一样去调用，实际发出远程调用的请求。需要定义一个接口@FeignClient(name=“xxx”)指定调用哪个服务。

4.12	~~~SpringCloud Bus
消息总线，将分布式的节点用轻量的消息代理连接起来，它可以用于广播配置文件的更改或者服务直接的通讯，也可用于监控。如果修改了配置文件，发送一次请求，所有的客户端便会重新读取配置文件。

4.13	~~~网关
4.13.1	功能
	API路由(转发请求到下游的微服务)路由由⼀个ID、⼀个⽬标URL（最终路由到的地址）、⼀系列的断⾔（匹配条件判断）和Filter过滤器（精细化控制）组成。如果断⾔为true，则匹配该路由。
	过滤器使⽤过滤器，可以在请求之前或者之后执⾏业务逻辑。基于Filter链提供鉴权、流量控制、熔断、日志监控等功能。



