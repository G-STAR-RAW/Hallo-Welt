hello
Java基础
1	Java基本数据类型介绍
  
除了double和long之外，对其他基本数据类型的操作都是原子性的。而对于double和long，两种类型都是8个字节64位，在32位操作系统的环境下，一次操作只能读取32位，无法一次性读取double和long数据，多线程环境下可能导致数据读写错误。
2	Java面向对象三大特性
	封装
将一个对象的属性私有化，同时提供一些能被外界访问的public方法。
	继承
子类继承父类的属性和方法，在此基础上，可在子类中对父类的方法进行重写，也可基于父类方法增加新的属性或功能。
	多态 
父类型的引用指向子类型的对象。程序运行中时，父类型的引用指向不同子类型的对象时，可能会产生不同的结果。
3	Java泛型中的E、T、K、V的含义
E：Element，在集合中使用，因为集合中存放的是元素。
T：Type，Java类。
K：Key，键。
V：Value，值。
N：Number，数值类型。
3.1	泛型类
  
3.2	泛型方法
  
3.3	泛型接口
  

4	类加载过程和变量加载顺序
类加载：描述类的数据从class文件加载到内存，并且对数据进行校验、解析和初始化。
4.1	类加载触发时机
	使用new关键字实例化对象；
	读取一个类的静态变量；
	调用类的静态方法；
	反射；
	初始化子类时，会先初始化父类；
	虚拟机启动时，优先初始化main()所在的类。
4.2	类加载过程
	加载：
通过类的全限定名来获取此类的二进制字节流；
将字节流代表的静态存储结构转换成方法区的运行时数据结构；
在内存中生成该类的class对象，作为方法区这个类各种数据的访问入口。
	验证：
确保class文件的字节流中包含的信息是否符合虚拟机的要求，并且不会有害于虚拟机。
	准备：
为类变量分配内存并设置初始值（零值）。
	解析：
将常量池的符号引用替换为直接引用(直接指针、句柄)的过程。
	初始化
为类变量、静态代码块初始化（赋值），执行构造函数。
4.3	变量初始化顺序
父类、子类：加载子类的时候会优先加载父类。
父类静态变量/父类静态代码块（这两个顺序由代码顺序决定）
子类静态变量/子类静态代码块
父类变量/父类代码块
父类构造函数
子类变量/子类代码块
子类构造函数

父类子类
静态变量/静态代码块普通变量/普通代码块构造函数
5	双亲委派模型
 
类加载器：通过一个类的全限定名来获取此类的二进制字节流；
任何一个类都是由这个类本身和加载这个类的类加载器来确定类在JVM中的唯一性。
5.1	工作原理
	如果一个类收到了类加载请求，首先会判断当前类是否已经被加载，若已被加载，则直接返回；若未被加载，则将类加载请求委托给父类加载器去执行，如果父类加载器还有父类加载器，则继续向上委托。如果父类加载器无法加载当前类，才会将加载任务交给子类去执行。
5.2	启动类加载器(Bootstrap ClassLoader)
主要负责加载<JAVA_HOME>\lib目录中或被-Xbootclasspath指定的路径中的并且文件名是被虚拟机识别的文件。它等于是所有类加载器的爸爸。
5.3	扩展类加载器(Extension ClassLoader)
独立于虚拟机，主要负责加载<JAVA_HOME>\lib\ext目录中或被java.ext.dirs系统变量所指定的路径的类库。
5.4	应用程序加载器(Application ClassLoader)
负责加载用户类路径(classPath)上的类库，如果我们没有实现自定义的类加载器那这玩意就是我们程序中的默认加载器。
5.5	好处
	避免类的重复加载
	保证Java的核心API不被篡改
5.6	双亲委派为什么是先往上传到bootstrap加载器，而不是从bootstrap加载器直接往下开始尝试？
 
如果自定义类加载器存在多个，如果从bootstrap加载器往下查找，则到最底层的自定义类加载器时，就不能确定应该选择哪个自定义类加载器进行加载。
5.7	打破双亲委派模型的特例
5.7.1	JDBC
 
Class.forName()加载用的是调用者的Classloader，这个调用者DriverManager是在rt.jar中的，ClassLoader是启动类加载器，而com.mysql.jdbc.Driver肯定不在<JAVA_HOME>/lib下，所以肯定是无法加载mysql中的这个类的。这就是双亲委派模型的局限性了，父级加载器无法加载子级类加载器路径中的类。
只要在启动类加载器中有方法获取应用程序类加载器，然后通过它去加载就可以了。这就是所谓的线程上下文加载器。
线程上下文类加载器让父级类加载器能通过调用子级类加载器来加载类，这打破了双亲委派模型的原则。
5.7.2	Tomcat容器
一个web容器可能需要部署两个应用程序，不同的应用程序可能会依赖同一个第三方类库的不同版本，不能要求同一个类库在同一个服务器只有一份，因此要保证每个应用程序的类库都是独立的，保证相互隔离。




6	线程的生命周期
 
 
以下内容或已过时。
	新建：
当创建新线程后，进入新建状态。如Thread thread = new MyThread()。
线程已创建完成，但还不能参与CPU资源的竞争。
	就绪：
新建就绪(start())，阻塞就绪(notify、notifyAll)，
运行就绪(yield或CPU时间片用完)，
调用start()后，进入就绪状态。如thread.start()。
等待CPU分配资源阶段，随时会进行CPU资源的抢夺。
	运行：
就绪运行，线程抢占到CPU的资源，执行当前线程。
	阻塞：
运行阻塞，由于某些原因使线程失去使用CPU的权利。
同步阻塞（synchronized），等待阻塞（wait），其他阻塞（sleep，join）。
	销毁：
线程执行完毕或者被强制性终止，则销毁线程，释放资源。
7	重写equals时为什么要重写hashcode？ 
Object中的equals()比较的是两个对象的地址，Object的hashcode()是一个本地方法，hash值的计算利用的是内存地址。
主要是为了应用于需要使用散列的数据结构中，例如HashMap、HashSet。
拿HashMap举例，在将key添加进HashMap中时，会先根据hashcode()计算出key的hash值，然后判断HashMap中是否存在相同hash值的key；若不存在，则将新增key添加进HashMap中，若存在，则通过equals()比较两个key是否相等。
重载hashCode()是为了对同一个key，能得到相同的hashCode，这样HashMap就可以定位到我们指定的key上。
重载equals()是为了向HashMap表明当前对象和key上所保存的对象是相等的，这样才能真正获得这个key所对应的键值对。
8	~~~Java IO相关
BIO：面向流，同步阻塞IO。服务器一个线程只处理一个客户端的连接。
	 Socket、ServerSocket
NIO：数据的读写通过Buffer缓冲区来完成。面向缓冲区，同步非阻塞IO。服务器一个线程可以处理来自多个客户端的连接。客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有IO请求时才启动一个线程进行处理。
	 Selector、SocketChannel、ServerSocketChannel。
多路复用器：在一个进程里面开辟多个通道，然后进程回去轮询准备就绪的通道，被选中的通道去进行读写操作。
8.1.1	多路复用机制
	selector模型(轮询)
 
	Poll模型(轮询)
Poll模型和selector模型没有本质区别：别在于selector模型有注册数量限制1024，而poll没有限制，因为poll是基于链表存储的。
	Epoll(事件驱动)
 

8.1.2	NIO channel和buffer
NIO的所有IO操作都是以channel开始的，NIO的channel就像BIO中的流；
可以同时对Channel进行读写操作；
Buffer可从channel读数据，也可向channel写数据。

8.1.3	NIO读文件
	获取输入流通道channel
	创建缓冲区buffer
	依次读取数据到缓冲区

9	内部类
9.1.1	成员内部类
	成员内部类可以访问外部类的所有成员属性和方法(private和静态)。
如果内部类和外部类有同名的成员变量或方法时，默认访问成员内部类的成员(就近原则)；此时，如果想在内部类里访问外部类的成员，需使用外部类.this.成员变量(方法)的形式。
	外部类访问内部类的成员变量和方法：new 内部类.方法。
	创建内部类对象：new Circle().new Draw()。
  
9.2	局部内部类
局部内部类定义在一个方法或者一个作用域内，类似于方法里的局部变量。
9.3	匿名内部类
常用于事件监听的代码里。
 
9.4	静态内部类
对比成员内部类，类似于类的静态属性，静态内部类不能使用外部类的非静态成员变量和方法。（示例：通过外部类(非new)创建静态内部类，静态内部类再去调用外部类的非静态成员，会产生矛盾，因为此时外部类并没有实例化）。

10	RandomACcess接  口
空接口，该接口为一个标志接口。实现该接口的集合(例如ArrayList)标志支持快速随机访问。

11	JDK8新特性
11.1	接口新增默认方法(default)
接口允许有实现方法，只需要在方法名前新增default关键字即可。
11.1.1	作用
为接口添加新方法，同时保证不影响已有的实现。
11.1.2	解决default方法冲突的三步骤：
	方法签名相同时，才表示出现了冲突。
	类中的方法优先级最高。类或者父类中的方法实现优先级大于任何接口的默认方法
	子接口的默认方法优先级更高。
	若最终还是无法判断，那么实现类必须通过显示复写的方式复写默认方法，然后再自己通过xxx.super.xxx()的方式来指定具体使用哪个接口的实现
11.1.3	示例
多重继承中，如果出现了同名的默认方法
   

示例1：若继承的两个接口相互独立且存在相同的默认方法，则需要重写default方法，并制定继承哪一个接口的default方法。
 		
示例2：若继承的两个接口存在相同的默认方法且为继承关系，则调用的是子类接口的default方法。
 

11.2	Lambda表达式
允许把函数作为一个方法的参数，可替换匿名内部类。
 
 

11.3	Stream
对一个集合中的一系列元素进行聚合操作，类似于RDD操作。
Stream 的一系列操作必须要使用终止操作，否者整个数据流是不会流动起来的，即处理操作不会执行。
Stream不会存储元素；
Stream不会改变源对象，会返回一个持有结果的Stream；
Stream操作是延时执行的，会等到需要结果的时候才会去真正执行。
11.3.1	中间操作符
 
11.3.2	终止操作符
 
11.3.3	示例
 
11.4	Optional 类
主要是为了解决空指针异常NullPointException问题
11.4.1	构造方法
	Optional.of(T)  
该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。
	Optional.ofNullable(T)
该方式的入参可以为null，当入参不确定为非null时使用。
	Optional.empty()
这种方式是返回一个空Optional，等效Optional.ofNullable(null)
11.4.2	常用方法
	ifPresent() <==> obj != null
当Optional实例的值非空时返回true，否则返回false; 
	orElseGet()
当Optional包含非空值时返回该值，否则通过接收的function生成一个默认的；
	map()
转换当前Optional的值，并返回一个新的Optional实例；
	orElse()
与orElseGet方法相似，不同的是orElse()直接返回传入的默认值。
	orElseThrow()
	value值为null时，直接抛出一个异常
11.4.3	示例
 	集合框架
1	介绍一下java的集合框架
 
集合代表了一组对象，可以对一个集合类的对象进行增删改查操作（类比数据库）。
所有集合类都位于java.util包下，主要由两个接口派生而成：Collection和Map
2	List
2.1	ArrayList的扩容机制

2.2	数组和ArrayList的区别？Arraylist是如何扩容的？
空间大小：数组大小是固定的，ArrayList大小是可动态变化的；
存储内容：数组可包含基本数据类型和对象，而ArrayList只可包含对象；
效率：数组比ArrayList更高效。ArrayList的数组扩容影响效率。

ArrayList底层是数组，扩容时，newCapacity = oldCapacity+(oldCapacity >> 1)，即扩容到当前大小的1.5倍，再将原数组数组转移到新数组。

2.3	如何保证ArrayList的线程安全？
2.3.1	Vector
把ArrayList 的所有方法都加上synchronized，性能低。
2.3.2	SynchronizedList
Collections.synchronizedList把一个普通的ArrayList包装成一个线程安全的数组容器，原理也是给所有的方法加上synchronized。

2.3.3	CopyOnWriteArrayList
 
读写分离，常用于读多写少(写入时拷贝数组很耗时)的场景，读操作不加锁，给写操作加上可重入锁。
CopyOnWriteArrayList有一个array数组和一个可重入锁lock，array数组用于存放具体元素，lock用于在执行修改操作时对修改操作进行加锁。
加锁后，先拷贝一份存储数组，然后添加元素到拷贝的数组中，然后用拷贝的数组替换原数组。
2.4	ArrayList在JDK7和JDK8中的区别？
JDK7初始化时，默认创建一个容量为10的数组；
JDK8初始化时，默认创建一个空数组，在第一次添加元素时才会去创建一个容量为10的数组；

2.5	ArrayList新增过程
	新增前，先校验ArrayList中的数组长度是否够用，如果不够用，则进行扩容；
	扩容时，生成一个原始数组容量大小1.5倍的新数组，然后将原始数组中的数据通过Arrays.copy复制到新数组中；
	将新增元素添加到新数组中的相应位置。
 

3	Map
3.1	Hash冲突解决方法
开放地址法：探测序列，查找一个空的单元插入。
再哈希法：准备多个hash函数，当发生冲突时，依次使用下一个hash函数。
链地址法：对于相同的hash值，使用链表进行连接。

3.2	HashMap遇见哈希冲突会如何怎么办？HashMap是线程安全的吗？ 
HashMap结构由桶加链表组成，桶是一个存储hash值的数组，每当添加一个新元素到HashMap中时，首先会根据hash算法计算出一个hash值，然后根据hash值找到对应的桶的位置，将该值存入桶对应的链表中。在java8之后，若链表大小超过8后，会将桶对应的链表转换成红黑树，以提高查询效率。
HashMap不是线程安全的。
3.3	HashMap在高并发下会有什么问题？
3.3.1	循环链表(死循环)
原因：并发+头插
Jdk1.7在高并发下，HashMap产生死循环，造成CPU100%负载：HashMap在存储时，若size超过当前最大容量*负载因子时，会增加桶的数目，进行HashMap数组扩容(resize())，在resize过程中，会调用transfer()方法将链表转换成新链表，在多线程情况下可能导致链表回路，从而导致死循环。

	并发扩容操作
 
扩容时，会调用transfer方法将旧的元素重新hash后放到新的table中。

Jdk1.8中HashMap的put元素操作由1.7的头插改为尾插，避免了死循环问题。
3.3.2	fail-fast
在高并发下，HashMap触发fail-fast：一个线程利用迭代器进行Map遍历时，另一个线程做插入删除操作，造成迭代的fail-fast。


3.4	JDK7 HashMap扩容的两个条件
	当前数据存储的数量(size())必须大于等于阈值(默认大小为16，负载因子0.75，阈值12);
	加入的数据发生了hash碰撞，如果加入的数据未发生hash碰撞，就算存储数量超过了阈值，也有可能不会扩容。

3.5	HashMap扩容流程
	扩容：创建一个新的Entry空数组，长度是原数组的2倍。
	ReHash：遍历原Entry数组，把所有的Entry重新Hash到新数组。




3.6	JDK8 HashMap中链表转换成红黑树
3.6.1	何时转换
当链表长度到达阈值8时，如果HashMap的数组大小<64，则进行扩容；如果数组大小超过了64，则将链表转换成红黑树
	当链表长度回退到阈值6时，则将红黑树回转成链表。
3.6.2	为什么两个阈值分别为6和8？
根据泊松分布算出，当链表中的元素个数为8时，出现的几率是亿分之六，基本上可忽略不计；
红黑树的转换需要时间和空间，为了防止HashMap在链表和红黑树之间频繁转换，故设置高于8转成红黑树、低于6转成链表，中间留了一个7作为缓冲。
3.6.3	为什么要转换成红黑树？
链表是线性查找，平均时间复杂度为n/2；红黑树为二分查找，平均时间复杂度为log2(n)。
举例：若hash算法写的不好，一个桶中冲突1024个key，使用链表平均需要查询512次，但是红黑树仅仅10次，红黑树的引入保证了在大量hash冲突的情况下，HashMap还具有良好的查询性能。
3.7	HashMap在JDK7和JDK8中的区别
	底层结构
JDK7：数组+链表，Entry。JDK8：数组+链表/红黑树，Node。
	哈希表为空时
JDK7：使用inflateTable()初始化一个数组。JDK8：直接调用resize()扩容。
	Hash冲突时插入数据
JDK7：头插(高并发下可能会发生死循环)。JDK8：尾插。
	Hash函数
JDK7：直接使用key的hashCode值,扰动复杂(对hash值一共进行5次异或和4次右移)。
JDK8：(h = key.hashCode()) ^ (h >>> 16)，结果更散列、扰动简单。
	扩容策略
JDK7：重新计算hash。
JDK8	：e.hash & oldCap,如果结果为0,位置不变；不为0,新的位置为老位置+老数组长度。
3.8	红黑树(二分查找)
3.8.1	二叉树、平衡二叉树
	二叉树
每个节点下有1个或者2个子节点，左节点<=父节点<=右节点，最大查找长度为树的高度。
但是在极端情况下，二叉树可能会退化为链表。
 

	平衡二叉树(AVL树)
在二叉树的基础上，每次新增节点的时候，都会通过左旋和右旋操作，来保证左子树和右子树的高度差不超过1，防止二叉树退化成链表。
 

3.8.2	红黑树
 
是一种平衡二叉树，它有以下规则：
	每一个节点，要么是黑色的，要么是红色的；
	根节点是黑色的；
	叶子节点(空)是黑色的；
	红色节点不能同时存在；
	从一个节点到它的任意根节点，所经过的黑色节点数必须是相同的。

在插入节点时，会通过变色和旋转两种操作，来保证红黑树满足上述五个条件。

红黑树是一种弱平衡二叉树，相对于平衡二叉树，插入和删除时旋转次数少，所以在插入和删除较多的情况下，使用红黑树；而在修改少，查找次数多的情况下，使用平衡二叉树。

3.9	Hashmap的底层实现
Jdk1.7：数组+链表
 
Jdk1.8：数组+链表/红黑树
 
3.10	HashSet底层实现
hashSet底层是基于HashMap实现的。
3.11	HashSet和TreeSet的区别
HashSet：无序，由哈希表实现，支持null，较快。
TreeSet：有序，由树实现，不支持null，较慢。

3.12	ConcurrentHashMap
HashMap在并发时不是线程安全的；
HashTable通过synchronized来保证线程安全，每个map只有一把锁，效率低下；
通过Collectrions.synchronizedMap(map类型对象)进行加锁，也是锁全表，效率低下。
3.12.1	ConcurrentHashMap原理
jdk1.7：segment数组（存储锁）+hashEntry数组，segment继承自ReentrantLock，采用锁分段技术来保证线程安全，将数据分为一段一段的，给每段数据各分配一把锁，不同数据段之间的读写互不影响，效率高；
 
jdk1.8：Node数组+链表/红黑树，并发控制使用 synchronized 和 CAS 来操作。
synchronized只锁定当前链表或红黑二叉树的首节点，这样只要hash不冲突，就不会产生并发，效率又提升N倍。
Node和HashEntry的元素value和指针next时用volatile修饰的，所以在多线程环境下线程A修改节点的value或者新增节点的时候是对线程B可见的。所以HashMap的get方法不需要加锁。
 
3.12.2	ConcurrentHashMap不支持key或者value为null的原因
	不支持key为null：没有原因
	不支持value为null：多线程环境下，如果map.get(key)返回null，就无法判断，究竟是map中没有key，还是该key对应的值就为null。
3.12.3	为什么使用synchronized(JDK8)替换ReentrantLock(JDK7)
	Synchronized性能提升：JDK6的锁优化，无锁->偏向锁->轻量级锁->重量级锁，锁粗化、所消除。
	并发能力更高：CAS + synchronized锁每个链表的头节点；segment锁多个链表。

3.13	HashMap的容量为什么推荐是2的幂次方？
计算桶的数组下标算法为：i = (n - 1) & hash。
桶的位置i = (n - 1) & hash  与操作可以实现HashMap中的数据均匀分布
实现均匀分布可以采用%运算（hash%length），但%运算效率低下，所以采用2进制运算（hash&(length-1)），可保证元素在桶数组中的均匀分布。
当n为2的幂次方时，hash%length与hash&(length-1)效果相同，但&速度更快。
 

3.14	Comparable和Comparator的区别
Comparable：排序接口(内部比较器)，实现compareTo(T t)。

Comparator：比较器接口(外部比较器)，实现compare(T t1, T t2)。

Collections.sort()/sort(list, new Comparator)。在设计初时有排序需求可使用Comparable，在后期扩展或新增排序需求时，可通过新增比较器进行排序。





 
 
 
 
 



